{"version":3,"file":"dexswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport PERMISSIVE_MULTICALL_ABI from './abis/PermissiveMulticall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport TOKEN_REGISTRY_ABI from './abis/token-registry.json'\nimport {\n  mainnet as coreMainnet,\n  mantle_testnet as coreMantle_Testnet,\n  mumbai as coreMumbai,\n} from 'dexswap-core/.contracts.json'\nimport {\n  mainnet as peripheryMainnet,\n  mantle_testnet as peripheryMantle_Testnet,\n  mumbai as peripheryMumbai,\n} from 'dexswap-router/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  MANTLE_TESTNET = 5001,\n  MUMBAI = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.MANTLE_TESTNET]: coreMantle_Testnet.factory,\n  [ChainId.MUMBAI]: coreMumbai.factory,\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.MANTLE_TESTNET]: peripheryMantle_Testnet.router,\n  [ChainId.MUMBAI]: peripheryMumbai.router,\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.MANTLE_TESTNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.MUMBAI]: '0x0000000000000000000000000000000000001234',\n}\n\nexport const TOKEN_REGISTRY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x93DB90445B76329e9ed96ECd74e76D8fbf2590d8',\n  [ChainId.MANTLE_TESTNET]: '0x3e7C79EF335F55b2E57C80731a68cAB9dB280453',\n  [ChainId.MUMBAI]: '0x63Aa6D1462165bDfb1b50415f5fe70Ded49E5d35',\n}\n\nexport const DEXSWAP_TOKEN_LIST_ID: { [chainId: number]: number } = {\n  [ChainId.MAINNET]: 1,\n  [ChainId.MANTLE_TESTNET]: 1,\n  [ChainId.MUMBAI]: 1,\n\n}\n\nexport const INIT_CODE_HASH = '0xf05144df01c2dff34b8969e598a19108ca21af70e4b6866975a88d73a45760ea'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst PERMISSIVE_MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0946f567d0ed891e6566c1da8e5093517f43571d',\n  [ChainId.MANTLE_TESTNET]: '0xA8fD29EbbfbC21bc274FedE5Aa5C5D3cedc43f2C',\n  [ChainId.MUMBAI]: '0xBE134FCAB1141485a7cD9Cc952172E0AcA9Ed46D',\n}\n\nexport {\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ABI,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  STAKING_REWARDS_FACTORY_ABI,\n  STAKING_REWARDS_DISTRIBUTION_ABI\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum,\n * SPOA for the Sokol testnet and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  // fiat currencies used to represent countervalues\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n\n  // Native currencies for deployment chains\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly BIT: Currency = new Currency(18, 'BIT', 'BIT')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.MANTLE_TESTNET]: Currency.BIT,\n    [ChainId.MUMBAI]: Currency.ETHER\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\n\nexport const ETHER = Currency.ETHER\nexport const BIT = Currency.BIT\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.MANTLE_TESTNET]: new Token(\n      ChainId.MANTLE_TESTNET,\n      '0x41810F1664ce580072D9c23286Ea5df68db766F1',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.MUMBAI]: new Token(\n      ChainId.MUMBAI,\n      '0x2c57C73542a23dA327699D288757CFb41f71855f',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n  }\n\n  public static readonly DEZU: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0xAc12F7948eFdfA205Df7daD3D1Ee04E564009ECB', 18, 'DEZU', 'DexSwapZonu'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x7FB56986974896ed4203857bAFf15Cb89cf082Cd', 18, 'DEZU', 'DexSwapZonu')\n  }\n\n  public static readonly WBTC: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0x777638AB212Fab2F1D1202DedCC7f18D2c527b50', 8, 'WBTC', 'Wrapped BTC'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0xE77B1Dc85edE199bf3dAA85D0958F2F966788af5', 8, 'WBTC', 'Wrapped BTC')\n  }\n\n  public static readonly USDC: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0x97830fa9e74C5a596C8994C37f9e92cBc42560B3', 8, 'USDC', 'USDC'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x530BEb0F943c4f23c95473F59Fe5fa9aF3eAA5A7', 8, 'USDC', 'USDC')\n  }\n\n  public static readonly USDT: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0xc75aE86d9F9d8C150b4bFf9A8Fb77481B0611a56', 8, 'USDT', 'USDT'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x181e4AB46e2b6A6a262B1bA261ffd324BBA7C9f5', 8, 'USDT', 'USDT')\n\n  }\n\n  public static readonly WBNB: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0xD711d6Ee5cD88d8E33536a4b2918605B084F1A03', 8, 'WBNB', 'WBNB'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0xEB82D57081e600dc4f3a0877D04f4099ed641757', 8, 'WBNB', 'WBNB')\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.MANTLE_TESTNET]: Token.WETH[ChainId.MANTLE_TESTNET],\n    [ChainId.MUMBAI]: Token.WETH[ChainId.MUMBAI],\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const WBNB = Token.WBNB\nexport const WBTC = Token.WBTC\nexport const USDC = Token.USDC\nexport const USDT = Token.USDT\nexport const DEZU = Token.DEZU\n\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, defaultSwapFee, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n\n/**\n * A platform to which DEXSWAP can route through.\n */\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash: string\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly DEXSWAP = new RoutablePlatform(\n    'DexSwap',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    defaultSwapFee\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS},\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS},\n    '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    _30\n  )\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: string,\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE = {\n  [ChainId.MAINNET]: {},\n  [ChainId.MANTLE_TESTNET]: {},\n  [ChainId.MUMBAI]: {},\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.DEXSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.DEXSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.DEXSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEZU', 'DexSwap Zonu')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class PricedTokenAmount extends CurrencyAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(this.token.price.quoteCurrency, this.raw)\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.MANTLE_TESTNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MANTLE_TESTNET).decimals).toString(),\n    ChainId.MANTLE_TESTNET\n  ),\n  [ChainId.MUMBAI]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MUMBAI).decimals).toString(),\n    ChainId.MUMBAI\n  ),\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.duration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    return JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), JSBI.BigInt(Math.floor(Date.now() / 1000)))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider, Provider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDexSwapPair from 'dexswap-core/build/IDexSwapPair.json'\nimport IDexSwapFactory from 'dexswap-core/build/IDexSwapFactory.json'\nimport invariant from 'tiny-invariant'\nimport ERC20Abi from './abis/ERC20.json'\nimport TokenRegistryAbi from './abis/token-registry.json'\nimport {\n  ChainId,\n  BigintIsh,\n  FACTORY_ADDRESS,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ADDRESS,\n  DEXSWAP_TOKEN_LIST_ID\n} from './constants'\nimport { Token } from './entities/token'\nimport { Currency } from './entities/currency'\nimport { Interface } from '@ethersproject/abi'\nimport { TokenList, TokenInfo } from './entities/token-list'\nimport { RoutablePlatform } from './entities/routable-platform'\nimport fetch from 'node-fetch'\n\nconst TOKEN_DATA_CACHE: {\n  [chainId: number]: { [address: string]: Currency }\n} = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': { decimals: 9, symbol: 'DGD', name: 'DigixDAO' } // DGD\n  }\n}\n\nconst TOKEN_LOGO_URI_CACHE: {\n  [chainId in ChainId]: { [address: string]: string }\n} = {\n  [ChainId.MAINNET]: {},\n  [ChainId.MANTLE_TESTNET]: {},\n  [ChainId.MUMBAI]: {},\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token> {\n    let tokenData: Currency\n    if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n      tokenData = TOKEN_DATA_CACHE[chainId][address]\n    } else {\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const erc20Interface = new Contract(address, ERC20Abi, provider).interface\n      const symbolFunction = erc20Interface.getFunction('symbol()')\n      const nameFunction = erc20Interface.getFunction('name()')\n      const decimalsFunction = erc20Interface.getFunction('decimals()')\n      const result = await multicall.aggregate([\n        [address, erc20Interface.encodeFunctionData(symbolFunction)],\n        [address, erc20Interface.encodeFunctionData(nameFunction)],\n        [address, erc20Interface.encodeFunctionData(decimalsFunction)]\n      ])\n      tokenData = {\n        symbol: erc20Interface.decodeFunctionResult(symbolFunction, result.returnData[0])[0],\n        name: erc20Interface.decodeFunctionResult(nameFunction, result.returnData[1])[0],\n        decimals: erc20Interface.decodeFunctionResult(decimalsFunction, result.returnData[2])[0]\n      }\n      TOKEN_DATA_CACHE[chainId][address] = tokenData\n    }\n    return new Token(chainId, address, tokenData.decimals, tokenData.symbol, tokenData.name)\n  }\n\n  /**\n   * Fetch on-chain, information on multiple given ERC20 token addresses, using the given ethers provider\n   * (or a default one if not provided). The results are cached for efficient subsequent accesses.\n   * @param chainId chain of the token\n   * @param addresses addresses of the tokens for which the data is needed\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchMultipleTokensData(\n    chainId: ChainId,\n    addresses: string[],\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token[]> {\n    const { previouslyCachedTokens, missingTokens } = addresses.reduce<{\n      previouslyCachedTokens: Token[]\n      missingTokens: string[]\n    }>(\n      (\n        accumulator: {\n          previouslyCachedTokens: Token[]\n          missingTokens: string[]\n        },\n        address: string,\n        _currentIndex: number,\n        _array: string[]\n      ): { previouslyCachedTokens: Token[]; missingTokens: string[] } => {\n        if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n          const cachedToken = TOKEN_DATA_CACHE[chainId][address]\n          accumulator.previouslyCachedTokens.push(\n            new Token(chainId, address, cachedToken.decimals, cachedToken.symbol, cachedToken.name)\n          )\n        } else {\n          accumulator.missingTokens.push(address)\n        }\n        return accumulator\n      },\n      { previouslyCachedTokens: [], missingTokens: [] }\n    )\n    const tokenData = previouslyCachedTokens\n    if (missingTokens.length > 0) {\n      const erc20Interface = new Interface(ERC20Abi)\n      const getSymbolFunction = erc20Interface.getFunction('symbol()')\n      const getNameFunction = erc20Interface.getFunction('name()')\n      const getDecimalsFunction = erc20Interface.getFunction('decimals()')\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const aggregatedCalls = missingTokens.reduce<[string, string][]>(\n        (\n          accumulator: [string, string][],\n          address: string,\n          _currentIndex: number,\n          _array: string[]\n        ): [string, string][] => {\n          accumulator.push([address, erc20Interface.encodeFunctionData(getSymbolFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getNameFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getDecimalsFunction)])\n          return accumulator\n        },\n        []\n      )\n      const result = await multicall.aggregateWithPermissiveness(aggregatedCalls)\n      const returnData = result[1]\n      missingTokens.forEach((address: string, index: number) => {\n        const [wrappedSymbol, wrappedName, wrappedDecimals] = returnData.slice(index * 3, index * 3 + 3)\n        if (!wrappedSymbol.success || !wrappedName.success || !wrappedDecimals.success) {\n          console.warn(`could not fetch ERC20 data for address ${address}`)\n          return\n        }\n        try {\n          tokenData.push(\n            new Token(\n              chainId,\n              address,\n              erc20Interface.decodeFunctionResult(getDecimalsFunction, wrappedDecimals.data)[0],\n              erc20Interface.decodeFunctionResult(getSymbolFunction, wrappedSymbol.data)[0],\n              erc20Interface.decodeFunctionResult(getNameFunction, wrappedName.data)[0]\n            )\n          )\n        } catch (error) {\n          console.error(`error decoding ERC20 data for address ${address}`)\n        }\n      })\n    }\n    return tokenData\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDexSwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDexSwapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDexSwapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(\n      PERMISSIVE_MULTICALL_ADDRESS[liquidityTokens[0].chainId],\n      PERMISSIVE_MULTICALL_ABI,\n      provider\n    )\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDexSwapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDexSwapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n  /**\n   * Fetches the default DXdao token list from the token registry scheme.\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchDxDaoTokenList(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<TokenList> {\n    const tokenRegistryContract = new Contract(TOKEN_REGISTRY_ADDRESS[chainId], TokenRegistryAbi, provider)\n    const tokenAddresses = await tokenRegistryContract.getTokens(DEXSWAP_TOKEN_LIST_ID[chainId])\n    const tokens = await this.fetchMultipleTokensData(chainId, tokenAddresses, provider)\n    const tokenList = []\n    for (const token of tokens) {\n      tokenList.push({\n        chainId,\n        address: token.address,\n        name: token.name!,\n        decimals: token.decimals,\n        symbol: token.symbol!,\n        logoURI: await this.fetchTokenLogoUri(token)\n      })\n    }\n    return {\n      name: 'DXswap default token list',\n      tokens: tokenList\n    }\n  }\n\n  private static async fetchTokenLogoUri(token: Token): Promise<string> {\n    const chainId = token.chainId\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.MANTLE_TESTNET && chainId !== ChainId.MUMBAI) {\n      return '' // token logos not fully supported for testnets\n    }\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      await this.populateTokenLogoCache(chainId)\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()]\n  }\n\n  private static async populateTokenLogoCache(chainId: ChainId): Promise<void> {\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.MANTLE_TESTNET && chainId !== ChainId.MUMBAI) {\n      return\n    }\n    let tokenListURL = ''\n    if (chainId == ChainId.MAINNET) {\n      tokenListURL = 'https://tokens.coingecko.com/uniswap/all.json' // coingecko list used for mainnet\n    } else {\n      tokenListURL = 'https://raw.githubusercontent.com/Agin-DropDisco/dexswapcore/main/DexSwapTokenList.json'\n    }\n    const response = await fetch(tokenListURL)\n    if (!response.ok) {\n      console.warn(`could not fetch token list at ${tokenListURL}`)\n      return\n    }\n    const { tokens }: { tokens: TokenInfo[] } = await response.json()\n    TOKEN_LOGO_URI_CACHE[chainId] = tokens.reduce((cache: { [tokenAddress: string]: string }, token) => {\n      cache[token.address.toLowerCase()] = token.logoURI\n      return cache\n    }, {})\n  }\n\n  public static getCachedTokenLogo(token: Token): string {\n    const { chainId } = token\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.MANTLE_TESTNET && chainId !== ChainId.MUMBAI) {\n      return ''\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()] || ''\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","MANTLE_TESTNET","coreMantle_Testnet","MUMBAI","coreMumbai","ROUTER_ADDRESS","peripheryMainnet","router","peripheryMantle_Testnet","peripheryMumbai","STAKING_REWARDS_FACTORY_ADDRESS","TOKEN_REGISTRY_ADDRESS","DEXSWAP_TOKEN_LIST_ID","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PERMISSIVE_MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","BIT","USD","Token","equals","other","this","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","currencyEquals","currencyA","currencyB","WETH","WBNB","WBTC","USDC","USDT","DEZU","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","DEXSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","_PAIR_ADDRESS_CACHE3$2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","utils","parseUnits","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","reward","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","yieldInPeriod","remainingRewardAmount","annualizationMultiplier","rawApy","PricedToken","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","_Pact","then","onFulfilled","onRejected","result","state","s","callback","_settle","v","e","o","pact","bind","observer","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","asyncIterator","TOKEN_DATA_CACHE","TOKEN_LOGO_URI_CACHE","Fetcher","fetchTokenData","provider","tokenData","getDefaultProvider","getNetwork","_TOKEN_DATA_CACHE$cha","multicall","Contract","PERMISSIVE_MULTICALL_ABI","erc20Interface","ERC20Abi","symbolFunction","getFunction","nameFunction","decimalsFunction","aggregate","encodeFunctionData","decodeFunctionResult","returnData","fetchMultipleTokensData","addresses","_currentIndex","_array","_TOKEN_DATA_CACHE$cha2","cachedToken","previouslyCachedTokens","missingTokens","Interface","getSymbolFunction","getNameFunction","getDecimalsFunction","aggregatedCalls","aggregateWithPermissiveness","forEach","index","wrappedSymbol","wrappedName","wrappedDecimals","success","data","console","warn","fetchPairData","IDexSwapPair","abi","getReserves","reserves0","reserves1","balances","IDexSwapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","factoryContract","liquidityTokenContract","calls","callData","tokenPairsIndex","call","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","feeDenominator","feeTo","feeReceiver","fetchDxDaoTokenList","tokenRegistryContract","TokenRegistryAbi","getTokens","tokenAddresses","_this4","tokenList","target","body","check","step","reject","_cycle","next","done","return","_fixup","TypeError","array","_forTo","fetchTokenLogoUri","logoURI","_this6","populateTokenLogoCache","tokenListURL","fetch","response","ok","json","cache","getCachedTokenLogo"],"mappings":"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"}