{"version":3,"file":"dexswap-sdk.esm.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport PERMISSIVE_MULTICALL_ABI from './abis/PermissiveMulticall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport TOKEN_REGISTRY_ABI from './abis/token-registry.json'\nimport {\n  mainnet as coreMainnet,\n  mantle_testnet as coreMantle_Testnet,\n  mumbai as coreMumbai,\n} from 'dexswap-core/.contracts.json'\nimport {\n  mainnet as peripheryMainnet,\n  mantle_testnet as peripheryMantle_Testnet,\n  mumbai as peripheryMumbai,\n} from 'dexswap-router/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  MANTLE_TESTNET = 5001,\n  MUMBAI = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.MANTLE_TESTNET]: coreMantle_Testnet.factory,\n  [ChainId.MUMBAI]: coreMumbai.factory,\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.MANTLE_TESTNET]: peripheryMantle_Testnet.router,\n  [ChainId.MUMBAI]: peripheryMumbai.router,\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.MANTLE_TESTNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.MUMBAI]: '0x0000000000000000000000000000000000001234',\n}\n\nexport const TOKEN_REGISTRY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x93DB90445B76329e9ed96ECd74e76D8fbf2590d8',\n  [ChainId.MANTLE_TESTNET]: '0x3e7C79EF335F55b2E57C80731a68cAB9dB280453',\n  [ChainId.MUMBAI]: '0x63Aa6D1462165bDfb1b50415f5fe70Ded49E5d35',\n}\n\nexport const DEXSWAP_TOKEN_LIST_ID: { [chainId: number]: number } = {\n  [ChainId.MAINNET]: 1,\n  [ChainId.MANTLE_TESTNET]: 1,\n  [ChainId.MUMBAI]: 1,\n\n}\n\nexport const INIT_CODE_HASH = '0x9cc6182b292e7e920520a70ff99748b19f30f51e4a384dc34cf9f7b10d936440'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst PERMISSIVE_MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0946f567d0ed891e6566c1da8e5093517f43571d',\n  [ChainId.MANTLE_TESTNET]: '0xA8fD29EbbfbC21bc274FedE5Aa5C5D3cedc43f2C',\n  [ChainId.MUMBAI]: '0xBE134FCAB1141485a7cD9Cc952172E0AcA9Ed46D',\n}\n\nexport {\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ABI,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  STAKING_REWARDS_FACTORY_ABI,\n  STAKING_REWARDS_DISTRIBUTION_ABI\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum,\n * SPOA for the Sokol testnet and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  // fiat currencies used to represent countervalues\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n\n  // Native currencies for deployment chains\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly BIT: Currency = new Currency(18, 'BIT', 'BIT')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.MANTLE_TESTNET]: Currency.BIT,\n    [ChainId.MUMBAI]: Currency.ETHER\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\n\nexport const ETHER = Currency.ETHER\nexport const BIT = Currency.BIT\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.MANTLE_TESTNET]: new Token(\n      ChainId.MANTLE_TESTNET,\n      '0x707f2fE56A440E766bec41aBC9fc8695567D0ceA',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.MUMBAI]: new Token(\n      ChainId.MUMBAI,\n      '0x2c57C73542a23dA327699D288757CFb41f71855f',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n  }\n\n  public static readonly DEZU: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0xCab6D79dD732779f081B5868AAb1e64F357e90A9', 18, 'DEZU', 'DexSwapZonu'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x7FB56986974896ed4203857bAFf15Cb89cf082Cd', 18, 'DEZU', 'DexSwapZonu')\n  }\n\n  public static readonly ZONU: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0x9C3a2429A288dBEA75C819Fd18C0b35a0C3E1361', 18, 'ZONU', 'ZoNulet'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x9C3a2429A288dBEA75C819Fd18C0b35a0C3E1361', 18, 'ZONU', 'ZoNulet')\n  }\n\n  public static readonly ZGEM: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0x8104B78e614a32ac4C5Cb54941a6B3b27143AbdB', 18, 'ZGEM', 'ZonuGem'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x8104B78e614a32ac4C5Cb54941a6B3b27143AbdB', 18, 'ZGEM', 'ZonuGem')\n  }\n\n  public static readonly WBTC: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0x777638AB212Fab2F1D1202DedCC7f18D2c527b50', 8, 'WBTC', 'Wrapped BTC'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0xE77B1Dc85edE199bf3dAA85D0958F2F966788af5', 8, 'WBTC', 'Wrapped BTC')\n  }\n\n  public static readonly USDC: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0x97830fa9e74C5a596C8994C37f9e92cBc42560B3', 8, 'USDC', 'USDC'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x530BEb0F943c4f23c95473F59Fe5fa9aF3eAA5A7', 8, 'USDC', 'USDC')\n  }\n\n  public static readonly USDT: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0xc75aE86d9F9d8C150b4bFf9A8Fb77481B0611a56', 8, 'USDT', 'USDT'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0x181e4AB46e2b6A6a262B1bA261ffd324BBA7C9f5', 8, 'USDT', 'USDT')\n\n  }\n\n  public static readonly WBNB: { [key: number]: Token } = {\n    [ChainId.MANTLE_TESTNET]: new Token(ChainId.MANTLE_TESTNET, '0xD711d6Ee5cD88d8E33536a4b2918605B084F1A03', 8, 'WBNB', 'WBNB'),\n    [ChainId.MUMBAI]: new Token(ChainId.MUMBAI, '0xEB82D57081e600dc4f3a0877D04f4099ed641757', 8, 'WBNB', 'WBNB')\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.MANTLE_TESTNET]: Token.WETH[ChainId.MANTLE_TESTNET],\n    [ChainId.MUMBAI]: Token.WETH[ChainId.MUMBAI],\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const WBNB = Token.WBNB\nexport const WBTC = Token.WBTC\nexport const USDC = Token.USDC\nexport const USDT = Token.USDT\nexport const DEZU = Token.DEZU\nexport const ZONU = Token.ZONU\nexport const ZGEM = Token.ZGEM\n\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, defaultSwapFee, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n\n/**\n * A platform to which DEXSWAP can route through.\n */\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash: string\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly DEXSWAP = new RoutablePlatform(\n    'DexSwap',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    defaultSwapFee\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS},\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS},\n    '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    _30\n  )\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: string,\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE = {\n  [ChainId.MAINNET]: {},\n  [ChainId.MANTLE_TESTNET]: {},\n  [ChainId.MUMBAI]: {},\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.DEXSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.DEXSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.DEXSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEZU', 'DexSwap Zonu')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class PricedTokenAmount extends CurrencyAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(this.token.price.quoteCurrency, this.raw)\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.MANTLE_TESTNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MANTLE_TESTNET).decimals).toString(),\n    ChainId.MANTLE_TESTNET\n  ),\n  [ChainId.MUMBAI]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MUMBAI).decimals).toString(),\n    ChainId.MUMBAI\n  ),\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.duration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    return JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), JSBI.BigInt(Math.floor(Date.now() / 1000)))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider, Provider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDexSwapPair from 'dexswap-core/build/IDexSwapPair.json'\nimport IDexSwapFactory from 'dexswap-core/build/IDexSwapFactory.json'\nimport invariant from 'tiny-invariant'\nimport ERC20Abi from './abis/ERC20.json'\nimport TokenRegistryAbi from './abis/token-registry.json'\nimport {\n  ChainId,\n  BigintIsh,\n  FACTORY_ADDRESS,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ADDRESS,\n  DEXSWAP_TOKEN_LIST_ID\n} from './constants'\nimport { Token } from './entities/token'\nimport { Currency } from './entities/currency'\nimport { Interface } from '@ethersproject/abi'\nimport { TokenList, TokenInfo } from './entities/token-list'\nimport { RoutablePlatform } from './entities/routable-platform'\nimport fetch from 'node-fetch'\n\nconst TOKEN_DATA_CACHE: {\n  [chainId: number]: { [address: string]: Currency }\n} = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': { decimals: 9, symbol: 'DGD', name: 'DigixDAO' } // DGD\n  }\n}\n\nconst TOKEN_LOGO_URI_CACHE: {\n  [chainId in ChainId]: { [address: string]: string }\n} = {\n  [ChainId.MAINNET]: {},\n  [ChainId.MANTLE_TESTNET]: {},\n  [ChainId.MUMBAI]: {},\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token> {\n    let tokenData: Currency\n    if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n      tokenData = TOKEN_DATA_CACHE[chainId][address]\n    } else {\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const erc20Interface = new Contract(address, ERC20Abi, provider).interface\n      const symbolFunction = erc20Interface.getFunction('symbol()')\n      const nameFunction = erc20Interface.getFunction('name()')\n      const decimalsFunction = erc20Interface.getFunction('decimals()')\n      const result = await multicall.aggregate([\n        [address, erc20Interface.encodeFunctionData(symbolFunction)],\n        [address, erc20Interface.encodeFunctionData(nameFunction)],\n        [address, erc20Interface.encodeFunctionData(decimalsFunction)]\n      ])\n      tokenData = {\n        symbol: erc20Interface.decodeFunctionResult(symbolFunction, result.returnData[0])[0],\n        name: erc20Interface.decodeFunctionResult(nameFunction, result.returnData[1])[0],\n        decimals: erc20Interface.decodeFunctionResult(decimalsFunction, result.returnData[2])[0]\n      }\n      TOKEN_DATA_CACHE[chainId][address] = tokenData\n    }\n    return new Token(chainId, address, tokenData.decimals, tokenData.symbol, tokenData.name)\n  }\n\n  /**\n   * Fetch on-chain, information on multiple given ERC20 token addresses, using the given ethers provider\n   * (or a default one if not provided). The results are cached for efficient subsequent accesses.\n   * @param chainId chain of the token\n   * @param addresses addresses of the tokens for which the data is needed\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchMultipleTokensData(\n    chainId: ChainId,\n    addresses: string[],\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token[]> {\n    const { previouslyCachedTokens, missingTokens } = addresses.reduce<{\n      previouslyCachedTokens: Token[]\n      missingTokens: string[]\n    }>(\n      (\n        accumulator: {\n          previouslyCachedTokens: Token[]\n          missingTokens: string[]\n        },\n        address: string,\n        _currentIndex: number,\n        _array: string[]\n      ): { previouslyCachedTokens: Token[]; missingTokens: string[] } => {\n        if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n          const cachedToken = TOKEN_DATA_CACHE[chainId][address]\n          accumulator.previouslyCachedTokens.push(\n            new Token(chainId, address, cachedToken.decimals, cachedToken.symbol, cachedToken.name)\n          )\n        } else {\n          accumulator.missingTokens.push(address)\n        }\n        return accumulator\n      },\n      { previouslyCachedTokens: [], missingTokens: [] }\n    )\n    const tokenData = previouslyCachedTokens\n    if (missingTokens.length > 0) {\n      const erc20Interface = new Interface(ERC20Abi)\n      const getSymbolFunction = erc20Interface.getFunction('symbol()')\n      const getNameFunction = erc20Interface.getFunction('name()')\n      const getDecimalsFunction = erc20Interface.getFunction('decimals()')\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const aggregatedCalls = missingTokens.reduce<[string, string][]>(\n        (\n          accumulator: [string, string][],\n          address: string,\n          _currentIndex: number,\n          _array: string[]\n        ): [string, string][] => {\n          accumulator.push([address, erc20Interface.encodeFunctionData(getSymbolFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getNameFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getDecimalsFunction)])\n          return accumulator\n        },\n        []\n      )\n      const result = await multicall.aggregateWithPermissiveness(aggregatedCalls)\n      const returnData = result[1]\n      missingTokens.forEach((address: string, index: number) => {\n        const [wrappedSymbol, wrappedName, wrappedDecimals] = returnData.slice(index * 3, index * 3 + 3)\n        if (!wrappedSymbol.success || !wrappedName.success || !wrappedDecimals.success) {\n          console.warn(`could not fetch ERC20 data for address ${address}`)\n          return\n        }\n        try {\n          tokenData.push(\n            new Token(\n              chainId,\n              address,\n              erc20Interface.decodeFunctionResult(getDecimalsFunction, wrappedDecimals.data)[0],\n              erc20Interface.decodeFunctionResult(getSymbolFunction, wrappedSymbol.data)[0],\n              erc20Interface.decodeFunctionResult(getNameFunction, wrappedName.data)[0]\n            )\n          )\n        } catch (error) {\n          console.error(`error decoding ERC20 data for address ${address}`)\n        }\n      })\n    }\n    return tokenData\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDexSwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDexSwapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDexSwapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(\n      PERMISSIVE_MULTICALL_ADDRESS[liquidityTokens[0].chainId],\n      PERMISSIVE_MULTICALL_ABI,\n      provider\n    )\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDexSwapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDexSwapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n  /**\n   * Fetches the default DXdao token list from the token registry scheme.\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchDxDaoTokenList(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<TokenList> {\n    const tokenRegistryContract = new Contract(TOKEN_REGISTRY_ADDRESS[chainId], TokenRegistryAbi, provider)\n    const tokenAddresses = await tokenRegistryContract.getTokens(DEXSWAP_TOKEN_LIST_ID[chainId])\n    const tokens = await this.fetchMultipleTokensData(chainId, tokenAddresses, provider)\n    const tokenList = []\n    for (const token of tokens) {\n      tokenList.push({\n        chainId,\n        address: token.address,\n        name: token.name!,\n        decimals: token.decimals,\n        symbol: token.symbol!,\n        logoURI: await this.fetchTokenLogoUri(token)\n      })\n    }\n    return {\n      name: 'DXswap default token list',\n      tokens: tokenList\n    }\n  }\n\n  private static async fetchTokenLogoUri(token: Token): Promise<string> {\n    const chainId = token.chainId\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.MANTLE_TESTNET && chainId !== ChainId.MUMBAI) {\n      return '' // token logos not fully supported for testnets\n    }\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      await this.populateTokenLogoCache(chainId)\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()]\n  }\n\n  private static async populateTokenLogoCache(chainId: ChainId): Promise<void> {\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.MANTLE_TESTNET && chainId !== ChainId.MUMBAI) {\n      return\n    }\n    let tokenListURL = ''\n    if (chainId == ChainId.MAINNET) {\n      tokenListURL = 'https://tokens.coingecko.com/uniswap/all.json' // coingecko list used for mainnet\n    } else {\n      tokenListURL = 'https://raw.githubusercontent.com/Agin-DropDisco/dexswapcore/main/DexSwapTokenList.json'\n    }\n    const response = await fetch(tokenListURL)\n    if (!response.ok) {\n      console.warn(`could not fetch token list at ${tokenListURL}`)\n      return\n    }\n    const { tokens }: { tokens: TokenInfo[] } = await response.json()\n    TOKEN_LOGO_URI_CACHE[chainId] = tokens.reduce((cache: { [tokenAddress: string]: string }, token) => {\n      cache[token.address.toLowerCase()] = token.logoURI\n      return cache\n    }, {})\n  }\n\n  public static getCachedTokenLogo(token: Token): string {\n    const { chainId } = token\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.MANTLE_TESTNET && chainId !== ChainId.MUMBAI) {\n      return ''\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()] || ''\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","ZERO_ADDRESS","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","MANTLE_TESTNET","coreMantle_Testnet","MUMBAI","coreMumbai","ROUTER_ADDRESS","peripheryMainnet","router","peripheryMantle_Testnet","peripheryMumbai","STAKING_REWARDS_FACTORY_ADDRESS","TOKEN_REGISTRY_ADDRESS","DEXSWAP_TOKEN_LIST_ID","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PERMISSIVE_MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","BIT","USD","Token","equals","other","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","WETH","currencyEquals","currencyA","currencyB","WBNB","WBTC","USDC","USDT","DEZU","ZONU","ZGEM","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","UNISWAP_FACTORY_ADDRESS","UNISWAP_ROUTER_ADDRESS","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","DEXSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","utils","parseUnits","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","reward","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","cumulativeRemainingRewardAmountNativeCurrency","remainingRewardAmount","yieldInPeriod","annualizationMultiplier","rawApy","PricedToken","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DATA_CACHE","TOKEN_LOGO_URI_CACHE","Fetcher","fetchTokenData","provider","tokenData","getDefaultProvider","getNetwork","multicall","Contract","PERMISSIVE_MULTICALL_ABI","erc20Interface","ERC20Abi","symbolFunction","getFunction","nameFunction","decimalsFunction","aggregate","encodeFunctionData","result","decodeFunctionResult","returnData","fetchMultipleTokensData","addresses","_currentIndex","_array","cachedToken","previouslyCachedTokens","missingTokens","Interface","getSymbolFunction","getNameFunction","getDecimalsFunction","aggregatedCalls","aggregateWithPermissiveness","forEach","index","wrappedSymbol","wrappedName","wrappedDecimals","success","console","warn","data","fetchPairData","IDexSwapPair","abi","getReserves","reserves0","reserves1","balances","IDexSwapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","factoryContract","liquidityTokenContract","calls","callData","tokenPairsIndex","call","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","feeDenominator","feeTo","feeReceiver","fetchDxDaoTokenList","tokenRegistryContract","TokenRegistryAbi","getTokens","tokenAddresses","tokenList","fetchTokenLogoUri","logoURI","populateTokenLogoCache","tokenListURL","fetch","response","ok","json","cache","getCachedTokenLogo"],"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"}